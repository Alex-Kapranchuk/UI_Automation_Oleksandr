Index: src/main/java/bussiness/Admin/AddCurrenciesPageBL.java
===================================================================
diff --git a/src/main/java/bussiness/Admin/AddCurrenciesPageBL.java b/src/main/java/bussiness/Admin/AddCurrenciesPageBL.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/bussiness/Admin/AddCurrenciesPageBL.java	
@@ -0,0 +1,90 @@
+package bussiness.Admin;
+
+import models.CurrencyModel;
+import org.testng.Assert;
+import pages.Admin.AddCurrenciesPage;
+import pages.Admin.CurrenciesPage;
+import repository.Admin.CurrencyRepository;
+import utils.DriverUtils;
+
+public class AddCurrenciesPageBL {
+
+    private final AddCurrenciesPage addCurrenciesPage;
+    private final DriverUtils driverUtils;
+    private final CurrenciesPage currenciesPage;
+
+    public AddCurrenciesPageBL() {
+
+        this.addCurrenciesPage = new AddCurrenciesPage();
+        this.currenciesPage = new CurrenciesPage();
+        driverUtils = new DriverUtils();
+    }
+
+    public AddCurrenciesPageBL addNewCurrency() {
+        CurrencyModel model = CurrencyRepository.getAddCurrencyModel();
+        clickAddNewCurrency();
+        inputCurrencyTitle(model.getCurrencyTitle());
+        inputCode(model.getCode());
+        inputSymbolLeft(model.getSymbolLeft());
+        inputValue(model.getValue());
+        selectStatus();
+        clickSaveCurrency();
+        return this;
+    }
+
+    public AddCurrenciesPageBL DeleteCreatedCurrencies() {
+        selectCreatedCurrencies();
+        clickTrashCurrencies();
+        getWindowPopUp();
+        return this;
+    }
+    public void verifyCurrenciesAlertMessage(){
+        Assert.assertTrue(currenciesPage.getAlertMessage().isDisplayed());
+    }
+
+    private void getWindowPopUp(){
+        currenciesPage.AcceptAlert();
+    }
+
+    private void selectCreatedCurrencies() {
+        currenciesPage.getSelectCurrencies().click();
+    }
+
+    private void clickTrashCurrencies() {
+        currenciesPage.getTrashCurrencies().click();
+    }
+
+
+    private void inputCurrencyTitle(String currencyTitle) {
+        addCurrenciesPage.getCurrencyTitle().clear();
+        addCurrenciesPage.getCurrencyTitle().sendKeys(currencyTitle);
+    }
+
+    private void inputCode(String code) {
+        addCurrenciesPage.getInputCode().clear();
+        addCurrenciesPage.getInputCode().sendKeys(code);
+    }
+
+    private void inputSymbolLeft(String symbolLeft) {
+        addCurrenciesPage.getSymbolLeft().clear();
+        addCurrenciesPage.getSymbolLeft().sendKeys(symbolLeft);
+    }
+
+    private void inputValue(String value) {
+        addCurrenciesPage.getValue().clear();
+        addCurrenciesPage.getValue().sendKeys(value);
+    }
+
+
+    private void clickSaveCurrency() {
+        addCurrenciesPage.getSaveCurrency().click();
+    }
+
+    private void clickAddNewCurrency() {
+        currenciesPage.getPlusCurrencies().click();
+    }
+
+    private void selectStatus() {
+        addCurrenciesPage.getInputStatus().click();
+    }
+}
Index: src/main/java/bussiness/Admin/NavigationBarBL.java
===================================================================
diff --git a/src/main/java/bussiness/Admin/NavigationBarBL.java b/src/main/java/bussiness/Admin/NavigationBarBL.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/bussiness/Admin/NavigationBarBL.java	
@@ -0,0 +1,56 @@
+package bussiness.Admin;
+
+
+import pages.Admin.NavigationBar;
+
+public class NavigationBarBL {
+
+    private final NavigationBar navigationBar;
+
+    public NavigationBarBL() {
+        this.navigationBar = new NavigationBar();
+    }
+
+    public NavigationBarBL goToTheProductsPage(){
+        clickOnCatalog();
+        clickOnProductTab();
+        return this;
+    }
+    public NavigationBarBL goToTheCurrencies(){
+        clickOnSystemTab();
+        clickOnSystemLocalizationTab();
+        clickOnSystemLocalizationCurrenciesTab();
+        return this;
+    }
+    public NavigationBarBL goToTheTaxRates(){
+        clickOnSystemTab();
+        clickOnSystemLocalizationTab();
+        clickOnTaxesTab();
+        clickOnTaxRates();
+        return this;
+    }
+
+    public NavigationBarBL goToTheTaxClasses(){
+//        clickOnSystemTab();
+//        clickOnSystemLocalizationTab();
+//        clickOnTaxesTab();
+        clickOnClasses();
+        return this;
+    }
+
+    private void clickOnTaxesTab(){navigationBar.getSystemLocalizationTaxesTab().click();}
+
+    private void clickOnTaxRates(){navigationBar.getSystemLocalizationTaxesTexRatesTab().click();}
+
+    private void clickOnClasses(){navigationBar.getSystemLocalizationTaxesTexClassesTab().click();}
+
+    private void clickOnCatalog() {navigationBar.getCatalogTab().click();}
+
+    private void clickOnProductTab(){navigationBar.getCatalogProductsTab().click();}
+
+    private void clickOnSystemTab(){navigationBar.getSystemTab().click();}
+
+    private void clickOnSystemLocalizationTab(){navigationBar.getSystemLocalisationTab().click();}
+
+    private void clickOnSystemLocalizationCurrenciesTab(){navigationBar.getSystemLocalisationCurrenciesTab().click();}
+}
Index: src/main/java/bussiness/Admin/AddTaxRatesPageBL.java
===================================================================
diff --git a/src/main/java/bussiness/Admin/AddTaxRatesPageBL.java b/src/main/java/bussiness/Admin/AddTaxRatesPageBL.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/bussiness/Admin/AddTaxRatesPageBL.java	
@@ -0,0 +1,40 @@
+package bussiness.Admin;
+
+import models.CreateProductModel;
+import models.TaxRateModel;
+import pages.Admin.AddTaxRatesPage;
+import pages.Admin.TaxRatesPage;
+import repository.Admin.CreateProductAdminRepository;
+import repository.Admin.TaxRatesRepository;
+
+public class AddTaxRatesPageBL {
+
+    private final AddTaxRatesPage addTaxRatesPage;
+
+    public AddTaxRatesPageBL() {
+        this.addTaxRatesPage = new AddTaxRatesPage();
+    }
+
+    public AddTaxRatesPageBL createTaxRate(){
+        TaxRateModel model = TaxRatesRepository.getTestTaxRateModel();
+        inputTaxName(model.getTaxName());
+        inputTaxRate(model.getTaxRate());
+        clickSaveTaxRate();
+        return this;
+    }
+
+    private void inputTaxName(String taxName){
+        addTaxRatesPage.getTaxNameInput().clear();
+        addTaxRatesPage.getTaxNameInput().sendKeys(taxName);
+    }
+
+    private void inputTaxRate(String taxRate){
+        addTaxRatesPage.getTaxRateInput().clear();
+        addTaxRatesPage.getTaxRateInput().sendKeys(taxRate);
+    }
+
+    private void clickSaveTaxRate(){
+        addTaxRatesPage.getSaveTaxRates().click();
+    }
+
+}
Index: src/main/java/pages/Admin/CurrenciesPage.java
===================================================================
diff --git a/src/main/java/pages/Admin/CurrenciesPage.java b/src/main/java/pages/Admin/CurrenciesPage.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/pages/Admin/CurrenciesPage.java	
@@ -0,0 +1,39 @@
+package pages.Admin;
+
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.FindBy;
+import pages.BasePage;
+
+public class CurrenciesPage extends BasePage {
+
+    @FindBy(xpath = "//*[@class='fa fa-plus']")
+    private WebElement plusCurrencies;
+
+    @FindBy(xpath = "//*[@class='fa fa-trash-o']")
+    private WebElement trashCurrencies;
+
+    @FindBy(xpath = "//tr[td[contains(@class, 'text-left')] = 'Гривня ']//input[@name='selected[]']")
+    private WebElement selectCurrencies;
+
+    @FindBy(xpath = "//*[@class =\"alert alert-success alert-dismissible\"]")
+    private WebElement alertMessage;
+
+    public WebElement getAlertMessage() {
+        return alertMessage;
+    }
+
+    public WebElement getTrashCurrencies() {
+        return trashCurrencies;
+    }
+
+    public WebElement getPlusCurrencies(){
+        return plusCurrencies;
+    }
+
+    public WebElement getSelectCurrencies() {
+        return selectCurrencies;
+    }
+    public void AcceptAlert(){
+        driver.switchTo().alert().accept();
+    }
+}
Index: src/main/java/pages/Admin/AddTaxRatesPage.java
===================================================================
diff --git a/src/main/java/pages/Admin/AddTaxRatesPage.java b/src/main/java/pages/Admin/AddTaxRatesPage.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/pages/Admin/AddTaxRatesPage.java	
@@ -0,0 +1,29 @@
+package pages.Admin;
+
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.FindBy;
+import pages.BasePage;
+
+public class AddTaxRatesPage extends BasePage {
+
+    @FindBy(name = "name")
+    private WebElement taxNameInput;
+
+    @FindBy(name = "rate")
+    private WebElement taxRateInput;
+
+    @FindBy(xpath = "//*[@class='fa fa-save']")
+    private WebElement saveTaxRates;
+
+    public WebElement getTaxNameInput() {
+        return taxNameInput;
+    }
+
+    public WebElement getTaxRateInput() {
+        return taxRateInput;
+    }
+
+    public WebElement getSaveTaxRates() {
+        return saveTaxRates;
+    }
+}
Index: src/main/java/models/TaxRateModel.java
===================================================================
diff --git a/src/main/java/models/TaxRateModel.java b/src/main/java/models/TaxRateModel.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/models/TaxRateModel.java	
@@ -0,0 +1,12 @@
+package models;
+
+import lombok.Builder;
+import lombok.Data;
+
+@Data
+@Builder
+public class TaxRateModel {
+
+    private String taxName;
+    private String taxRate;
+}
Index: src/main/java/models/CurrencyModel.java
===================================================================
diff --git a/src/main/java/models/CurrencyModel.java b/src/main/java/models/CurrencyModel.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/models/CurrencyModel.java	
@@ -0,0 +1,21 @@
+package models;
+
+import lombok.Builder;
+import lombok.Data;
+
+@Data
+@Builder
+public class CurrencyModel {
+
+    private String euro;
+    private String dollar;
+    private String pound;
+    private String hryvnia;
+
+    /** Add Currencies*/
+
+    private String currencyTitle;
+    private String code;
+    private String symbolLeft;
+    private String value;
+}
Index: src/main/java/pages/Admin/TaxRatesPage.java
===================================================================
diff --git a/src/main/java/pages/Admin/TaxRatesPage.java b/src/main/java/pages/Admin/TaxRatesPage.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/pages/Admin/TaxRatesPage.java	
@@ -0,0 +1,14 @@
+package pages.Admin;
+
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.FindBy;
+import pages.BasePage;
+
+public class TaxRatesPage extends BasePage {
+    @FindBy(xpath = "//*[@class='fa fa-plus']")
+    private WebElement plusTaxRate;
+
+    public WebElement getPlusTaxRate() {
+        return plusTaxRate;
+    }
+}
Index: src/main/java/pages/Admin/TaxClassesPage.java
===================================================================
diff --git a/src/main/java/pages/Admin/TaxClassesPage.java b/src/main/java/pages/Admin/TaxClassesPage.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/pages/Admin/TaxClassesPage.java	
@@ -0,0 +1,41 @@
+package pages.Admin;
+
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.FindBy;
+import org.openqa.selenium.support.ui.ExpectedConditions;
+import pages.BasePage;
+
+import java.util.List;
+
+public class TaxClassesPage extends BasePage {
+
+    @FindBy(xpath = "//*[contains( text(),'Taxable Goods')]/..//i[@class='fa fa-pencil']")
+    private WebElement editTaxableGoods;
+
+    @FindBy(xpath = "//*[@class='fa fa-plus-circle']")
+    private WebElement plusTaxRatesToClasses;
+
+    @FindBy(name = "tax_rule[2][tax_rate_id]")
+    private WebElement listTaxRate;
+
+    @FindBy(xpath = "//*[@class='fa fa-save']")
+    private WebElement saveTaxClasses;
+
+    public WebElement getPlusTaxRatesToClasses() {
+       wait.until(ExpectedConditions.visibilityOf(plusTaxRatesToClasses));
+        return plusTaxRatesToClasses;
+    }
+
+    public WebElement getEditTaxableGoods() {
+        return editTaxableGoods;
+    }
+
+    public WebElement getListTaxRate() {
+        return listTaxRate;
+    }
+    public WebElement getSaveTaxClasses() {
+        return saveTaxClasses;
+    }
+
+
+}
Index: src/test/java/CurrencyTests.java
===================================================================
diff --git a/src/test/java/CurrencyTests.java b/src/test/java/CurrencyTests.java
new file mode 100644
--- /dev/null	
+++ b/src/test/java/CurrencyTests.java	
@@ -0,0 +1,68 @@
+import bussiness.Admin.AddCurrenciesPageBL;
+import bussiness.Admin.LoginPageBL;
+import bussiness.Admin.NavigationBarBL;
+import bussiness.HeaderPageBL;
+import bussiness.HomePageBL;
+import bussiness.SearchPageBL;
+import enums.URLs;
+import navigation.Navigation;
+import org.testng.annotations.Test;
+
+public class CurrencyTests extends BaseTest {
+
+    @Test
+    public void productListCurrencyTest() {
+        new Navigation().navigateToUrl(URLs.BASE_URL.getValue());
+        HomePageBL homePageBL = new HomePageBL();
+        homePageBL.
+                searchFoundProduct();
+        SearchPageBL searchPageBL = new SearchPageBL();
+        searchPageBL.verifyCurrency("$");
+        HeaderPageBL headerPageBL = new HeaderPageBL();
+        headerPageBL.
+                changeCurrencyToEuro();
+        searchPageBL.
+                verifyCurrency("€"); /** if we get from model parameters (euro and pound) equals null */
+    }
+
+    @Test
+    public void addNewCurrencyTest() {
+        new Navigation().navigateToUrl(URLs.ADMIN_LOGIN_URL.getValue());
+        LoginPageBL loginPageBL = new LoginPageBL();
+        loginPageBL.
+                loginAsAdmin();
+        NavigationBarBL navigationBarBL = new NavigationBarBL();
+        navigationBarBL.
+                goToTheCurrencies();
+        AddCurrenciesPageBL addCurrenciesPageBL = new AddCurrenciesPageBL();
+        addCurrenciesPageBL.
+                addNewCurrency();
+        new Navigation().navigateToUrl(URLs.BASE_URL.getValue());
+        HeaderPageBL headerPageBL = new HeaderPageBL();
+        headerPageBL.
+                changeCurrencyToHryvnia();
+        HomePageBL homePageBL = new HomePageBL();
+        homePageBL.
+                searchFoundProduct();
+        SearchPageBL searchPageBL = new SearchPageBL();
+        searchPageBL.
+                verifyCurrency("₴");
+    }
+
+    @Test
+    public void deleteCreatedCurrenciesTest() throws InterruptedException {
+        new Navigation().navigateToUrl(URLs.ADMIN_LOGIN_URL.getValue());
+        LoginPageBL loginPageBL = new LoginPageBL();
+        loginPageBL.
+                loginAsAdmin();
+        NavigationBarBL navigationBarBL = new NavigationBarBL();
+        navigationBarBL.
+                goToTheCurrencies();
+        AddCurrenciesPageBL addCurrenciesPageBL = new AddCurrenciesPageBL();
+        addCurrenciesPageBL.
+                DeleteCreatedCurrencies();
+        addCurrenciesPageBL.
+                verifyCurrenciesAlertMessage();
+    }
+
+}
Index: src/main/java/pages/Admin/AddCurrenciesPage.java
===================================================================
diff --git a/src/main/java/pages/Admin/AddCurrenciesPage.java b/src/main/java/pages/Admin/AddCurrenciesPage.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/pages/Admin/AddCurrenciesPage.java	
@@ -0,0 +1,52 @@
+package pages.Admin;
+
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.FindBy;
+import org.openqa.selenium.support.ui.ExpectedConditions;
+import pages.BasePage;
+
+public class AddCurrenciesPage extends BasePage {
+
+    @FindBy(xpath = "//*[@id='input-title']")
+    private WebElement currencyTitle;
+
+    @FindBy(xpath = "//*[@id='input-code']")
+    private WebElement inputCode;
+
+    @FindBy(xpath = "//*[@id='input-status']/option[1]")
+    private WebElement inputStatus;
+
+    @FindBy(xpath = "//*[@class='fa fa-save']")
+    private WebElement saveCurrency;
+
+    @FindBy(name = "symbol_left")
+    private WebElement symbolLeft;
+
+    @FindBy(name = "value")
+    private WebElement value;
+
+    public WebElement getValue(){
+        return value;
+    }
+
+    public WebElement getSaveCurrency(){
+        return  saveCurrency;
+    }
+
+      public WebElement getCurrencyTitle(){
+          wait.until(ExpectedConditions.visibilityOf(currencyTitle));
+        return currencyTitle;
+    }
+    public WebElement getInputCode(){
+        return inputCode;
+    }
+
+    public WebElement getInputStatus(){
+        return inputStatus;
+    }
+
+    public WebElement getSymbolLeft(){
+          return symbolLeft;
+    }
+}
Index: src/test/java/TaxesTests.java
===================================================================
diff --git a/src/test/java/TaxesTests.java b/src/test/java/TaxesTests.java
new file mode 100644
--- /dev/null	
+++ b/src/test/java/TaxesTests.java	
@@ -0,0 +1,35 @@
+import bussiness.Admin.*;
+import enums.URLs;
+import navigation.Navigation;
+import org.testng.annotations.Test;
+import pages.Admin.TaxRatesPage;
+
+public class TaxesTests extends BaseTest{
+
+    @Test
+    public void AddNewTaxesTest() throws InterruptedException {
+        new Navigation().navigateToUrl(URLs.ADMIN_LOGIN_URL.getValue());
+        LoginPageBL loginPageBL = new LoginPageBL();
+        loginPageBL.
+                loginAsAdmin();
+        DashboardPageBL dashboardPageBL = new DashboardPageBL();
+        dashboardPageBL.
+                verifySuccessfulLogin();
+        NavigationBarBL navigationBarBL = new NavigationBarBL();
+        navigationBarBL.
+                goToTheTaxRates();
+        TaxRatesPageBL taxRatesPageBL = new TaxRatesPageBL();
+        taxRatesPageBL.
+                clickCreateTax();
+        AddTaxRatesPageBL addTaxRatesPageBL = new AddTaxRatesPageBL();
+        addTaxRatesPageBL.
+                createTaxRate();
+        navigationBarBL.
+                goToTheTaxClasses();
+        TaxClassesPageBL taxClassesPageBL = new TaxClassesPageBL();
+        taxClassesPageBL.
+                addTaxToTheClasses(); // rule [2-3] selector -  A thin place
+        Thread.sleep(3000);
+
+    }
+}
Index: src/main/java/bussiness/Admin/TaxRatesPageBL.java
===================================================================
diff --git a/src/main/java/bussiness/Admin/TaxRatesPageBL.java b/src/main/java/bussiness/Admin/TaxRatesPageBL.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/bussiness/Admin/TaxRatesPageBL.java	
@@ -0,0 +1,23 @@
+package bussiness.Admin;
+
+import pages.Admin.TaxRatesPage;
+
+
+public class TaxRatesPageBL {
+
+    private final TaxRatesPage taxRatesPage;
+
+    public TaxRatesPageBL() {
+        this.taxRatesPage = new TaxRatesPage();
+    }
+
+    public TaxRatesPageBL clickCreateTax(){
+        clickOnPlus();
+     return this;
+    }
+
+    private void clickOnPlus(){
+        taxRatesPage.getPlusTaxRate().click();
+    }
+
+}
Index: src/main/java/bussiness/Admin/TaxClassesPageBL.java
===================================================================
diff --git a/src/main/java/bussiness/Admin/TaxClassesPageBL.java b/src/main/java/bussiness/Admin/TaxClassesPageBL.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/bussiness/Admin/TaxClassesPageBL.java	
@@ -0,0 +1,37 @@
+package bussiness.Admin;
+
+import org.openqa.selenium.support.ui.Select;
+import pages.Admin.TaxClassesPage;
+
+public class TaxClassesPageBL {
+    private final TaxClassesPage taxClassesPage;
+
+    public TaxClassesPageBL(){
+        this.taxClassesPage = new TaxClassesPage();
+    }
+
+    public TaxClassesPageBL addTaxToTheClasses() {
+        editTaxableGoods();
+        addRuleToTheClass();
+        selectTestTax();
+        saveTaxClasses();
+        return this;
+    }
+
+    private void editTaxableGoods(){
+        taxClassesPage.getEditTaxableGoods().click();
+    }
+    private void addRuleToTheClass(){
+        taxClassesPage.getPlusTaxRatesToClasses().click();
+    }
+    private void selectTestTax(){
+        new Select(taxClassesPage.getListTaxRate()).selectByVisibleText("TestTax");
+    }
+    private void saveTaxClasses(){
+        taxClassesPage.getSaveTaxClasses().click();
+    }
+
+
+
+
+}
Index: src/main/java/repository/Admin/TaxRatesRepository.java
===================================================================
diff --git a/src/main/java/repository/Admin/TaxRatesRepository.java b/src/main/java/repository/Admin/TaxRatesRepository.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/repository/Admin/TaxRatesRepository.java	
@@ -0,0 +1,13 @@
+package repository.Admin;
+
+import models.TaxRateModel;
+
+public class TaxRatesRepository {
+
+    public static TaxRateModel getTestTaxRateModel(){
+        return TaxRateModel.builder()
+                .taxName("TestTax")
+                .taxRate("3")
+                .build();
+    }
+}
Index: src/main/java/repository/Admin/CurrencyRepository.java
===================================================================
diff --git a/src/main/java/repository/Admin/CurrencyRepository.java b/src/main/java/repository/Admin/CurrencyRepository.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/repository/Admin/CurrencyRepository.java	
@@ -0,0 +1,45 @@
+package repository.Admin;
+
+import models.CurrencyModel;
+
+
+public class CurrencyRepository {
+
+    public static CurrencyModel getEuroCurrencyModel() {
+        return CurrencyModel.builder()
+                .euro("€")
+                .build();
+    }
+
+    public static CurrencyModel getDollarCurrencyModel() {
+        return CurrencyModel.builder()
+                .dollar("$")
+                .build();
+    }
+
+    public static CurrencyModel getPoundCurrencyModel() {
+        return CurrencyModel.builder()
+                .pound("£")
+                .build();
+    }
+
+    public static CurrencyModel getHryvniaCurrencyModel(){
+        return CurrencyModel.builder()
+                .hryvnia("₴")
+                .build();
+    }
+
+    public static CurrencyModel getAddCurrencyModel(){
+        return CurrencyModel.builder()
+                .currencyTitle("Гривня ")
+                .code("UAH")
+                .symbolLeft("₴")
+                .value("0.0375790")
+                .build();
+    }
+
+
+
+
+
+}
